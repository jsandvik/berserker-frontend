{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","loading","error","moves","characters","characterFilter","commandFilter","componentDidMount","fetch","then","response","json","results","map","move","character","characterName","uniqueCharacters","filter","index","indexOf","_this","setState","onFilterCharacter","e","target","value","onFilterCommand","render","_this$state","react_default","a","createElement","message","console","log","filtered_moves","command","Container_default","Row_default","Col_default","Form_default","Group","Label","Control","onChange","as","key","type","placeholder","Table_default","striped","bordered","hover","moveId","impactFrames","blockFrames","hitFrames","counterFrames","damage","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAsHeA,0NA5GbC,MAAQ,CACNC,SAAS,EACTC,MAAO,KACPC,MAAO,GACPC,WAAY,GACZC,gBAAiB,GACjBC,cAAe,MAGjBC,kBAAoB,WAClBC,MAAM,gDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KACC,SAAAG,GACE,IAAMR,EAAaQ,EAAQC,IAAI,SAAAC,GAAI,OAAIA,EAAKC,UAAUC,gBAChDC,EAAmBb,EAAWc,OAClC,SAACH,EAAWI,GAAZ,OAAsBf,EAAWgB,QAAQL,IAAcI,IAGzDE,EAAKC,SAAS,CAAErB,SAAS,EAAOE,MAAOS,EAASR,WAAYa,KAE9D,SAAAf,GACEmB,EAAKC,SAAS,CAAErB,SAAS,EAAOC,eAKxCqB,kBAAoB,SAACC,GACnBH,EAAKC,SAAS,CAACjB,gBAAiBmB,EAAEC,OAAOC,WAG3CC,gBAAkB,SAACH,GACjBH,EAAKC,SAAS,CAAChB,cAAekB,EAAEC,OAAOC,WAGzCE,OAAS,WAAM,IAAAC,EACiER,EAAKrB,MAA3EE,EADK2B,EACL3B,MAAOD,EADF4B,EACE5B,QAASE,EADX0B,EACW1B,MAAOC,EADlByB,EACkBzB,WAAYC,EAD9BwB,EAC8BxB,gBAAiBC,EAD/CuB,EAC+CvB,cAE5D,GAAIJ,EACF,OAAO4B,EAAAC,EAAAC,cAAA,6BAAqB9B,EAAM+B,SAGpC,GAAIhC,EACF,OAAO6B,EAAAC,EAAAC,cAAA,yBAETE,QAAQC,IAAI9B,GAEZ,IAAI+B,EAAiBjC,EAQrB,OAPIE,IACF+B,EAAiBA,EAAelB,OAAO,SAAAJ,GAAI,OAAIT,IAAoBS,EAAKC,UAAUC,iBAEhFV,IACF8B,EAAiBA,EAAelB,OAAO,SAAAJ,GAAI,OAAIR,IAAkBQ,EAAKuB,WAItEP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACED,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACED,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACED,EAAAC,EAAAC,cAACS,EAAAV,EAAKW,MAAN,KACEZ,EAAAC,EAAAC,cAACS,EAAAV,EAAKY,MAAN,yBACAb,EAAAC,EAAAC,cAACS,EAAAV,EAAKa,QAAN,CAAcC,SAAUxB,EAAKE,kBAAmBuB,GAAG,SAASpB,MAAOrB,GACjEyB,EAAAC,EAAAC,cAAA,UAAQN,MAAM,IAAd,OACCtB,EAAWS,IAAI,SAAAE,GAAS,OACvBe,EAAAC,EAAAC,cAAA,UAAQe,IAAKhC,GAAYA,QAKjCe,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACED,EAAAC,EAAAC,cAACS,EAAAV,EAAKW,MAAN,KACEZ,EAAAC,EAAAC,cAACS,EAAAV,EAAKY,MAAN,uBACAb,EAAAC,EAAAC,cAACS,EAAAV,EAAKa,QAAN,CAAcC,SAAUxB,EAAKM,gBAAiBqB,KAAK,OAAOC,YAAY,cAAcvB,MAAOpB,OAKjGwB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAOoB,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3BvB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,sBAGJF,EAAAC,EAAAC,cAAA,aACGI,EAAevB,IAAI,SAAAC,GAAI,OACtBgB,EAAAC,EAAAC,cAAA,MAAIe,IAAKjC,EAAKwC,QACZxB,EAAAC,EAAAC,cAAA,UAAKlB,EAAKC,UAAUC,eACpBc,EAAAC,EAAAC,cAAA,UAAKlB,EAAKuB,SACVP,EAAAC,EAAAC,cAAA,UAAKlB,EAAKyC,cACVzB,EAAAC,EAAAC,cAAA,UAAKlB,EAAK0C,aACV1B,EAAAC,EAAAC,cAAA,UAAKlB,EAAK2C,WACV3B,EAAAC,EAAAC,cAAA,UAAKlB,EAAK4C,eACV5B,EAAAC,EAAAC,cAAA,UAAKlB,EAAK6C,4CAnGRC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStC,OAAOE,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,KAAK,SAAAgE,GACjCA,EAAaC","file":"static/js/main.4dc85902.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Table from \"react-bootstrap/Table\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nclass App extends Component {\n  state = {\n    loading: true,\n    error: null,\n    moves: [],\n    characters: [],\n    characterFilter: \"\",\n    commandFilter: \"\",\n  };\n\n  componentDidMount = () => {\n    fetch(\"https://berserkerscience.herokuapp.com/moves\")\n      .then(response => response.json())\n      .then(\n        results => {\n          const characters = results.map(move => move.character.characterName);\n          const uniqueCharacters = characters.filter(\n            (character, index) => characters.indexOf(character) >= index\n          );\n\n          this.setState({ loading: false, moves: results, characters: uniqueCharacters });\n        },\n        error => {\n          this.setState({ loading: false, error });\n        }\n      );\n  }\n\n  onFilterCharacter = (e) => {\n    this.setState({characterFilter: e.target.value});\n  }\n\n  onFilterCommand = (e) => {\n    this.setState({commandFilter: e.target.value});\n  }\n\n  render = () => {\n    const { error, loading, moves, characters, characterFilter, commandFilter } = this.state;\n\n    if (error) {\n      return <div>Error loading: {error.message}</div>;\n    }\n\n    if (loading) {\n      return <div>Loading...</div>;\n    }\n    console.log(characterFilter);\n\n    let filtered_moves = moves;\n    if (characterFilter) {\n      filtered_moves = filtered_moves.filter(move => characterFilter === move.character.characterName);\n    }\n    if (commandFilter) {\n      filtered_moves = filtered_moves.filter(move => commandFilter === move.command);\n    }\n\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Form.Group>\n              <Form.Label>Filter Character</Form.Label>\n              <Form.Control onChange={this.onFilterCharacter} as=\"select\" value={characterFilter}>\n                <option value=\"\">All</option>\n                {characters.map(character => (\n                  <option key={character}>{character}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Col>\n          <Col>\n            <Form.Group>\n              <Form.Label>Filter Command</Form.Label>\n              <Form.Control onChange={this.onFilterCommand} type=\"text\" placeholder=\"Example: 5A\" value={commandFilter} />\n            </Form.Group>\n          </Col>\n        </Row>\n\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Character</th>\n              <th>Command</th>\n              <th>Impact Frames</th>\n              <th>Blocked Frames</th>\n              <th>Hit Frames</th>\n              <th>Counter Hit Frames</th>\n              <th>Damage</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filtered_moves.map(move => (\n              <tr key={move.moveId}>\n                <td>{move.character.characterName}</td>\n                <td>{move.command}</td>\n                <td>{move.impactFrames}</td>\n                <td>{move.blockFrames}</td>\n                <td>{move.hitFrames}</td>\n                <td>{move.counterFrames}</td>\n                <td>{move.damage}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}