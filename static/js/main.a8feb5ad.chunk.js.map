{"version":3,"sources":["Paginator.jsx","App.js","serviceWorker.js","index.js"],"names":["itemTypeToComponent","PAGE","props","react_default","a","createElement","Pagination_default","Item","active","isActive","onClick","disabled","value","ELLIPSIS","Ellipsis","FIRST_PAGE_LINK","First","PREVIOUS_PAGE_LINK","Prev","NEXT_PAGE_LINK","Next","LAST_PAGE_LINK","Last","Paginator","require","createUltimatePagination","WrapperComponent","className","children","SIZE","CHARACTERS","App","state","loading","error","totalPages","currentPage","moves","character","commandFilter","fetchMoves","page","url","concat","fetch","then","response","json","results","_this","setState","numPages","componentDidMount","onFilterCharacter","e","target","onFilterCommand","onPageChange","render","_this$state","message","filtered_moves","filter","move","command","Container_default","Row_default","Col_default","Form_default","Group","Label","Control","onChange","as","map","key","type","placeholder","Table_default","striped","bordered","hover","size","responsive","moveId","attackTypes","join","impactFrames","blockFrames","hitProperty","hitFrames","counterProperty","counterFrames","damage","gapFrames","src_Paginator","hidePreviousAndNextPageLinks","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8feb5ad.chunk.js","sourcesContent":["import React from \"react\";\nimport Pagination from 'react-bootstrap/Pagination';\nvar ReactUltimatePagination = require('react-ultimate-pagination');\n\nfunction Page(props) {\n  return (\n    <Pagination.Item\n    active={props.isActive}\n    onClick={props.onClick}\n      disabled={props.disabled}\n    >{props.value}</Pagination.Item>\n  );\n}\n\nfunction Ellipsis(props) {\n  return <Pagination.Ellipsis disabled />\n}\n\nfunction FirstPageLink(props) {\n  return <Pagination.First onClick={props.onClick} disabled={props.disabled} />\n}\n\nfunction PreviousPageLink(props) {\n  return <Pagination.Prev onClick={props.onClick} disabled={props.disabled} />\n}\n\nfunction NextPageLink(props) {\n  return <Pagination.Next onClick={props.onClick} disabled={props.disabled} />\n}\n\nfunction LastPageLink(props) {\n    return <Pagination.Last onClick={props.onClick} disabled={props.disabled} />\n}\n\nfunction Wrapper(props) {\n  return <Pagination className=\"justify-content-center\">{props.children}</Pagination>\n}\n\nvar itemTypeToComponent = {\n  'PAGE': Page,\n  'ELLIPSIS': Ellipsis,\n  'FIRST_PAGE_LINK': FirstPageLink,\n  'PREVIOUS_PAGE_LINK': PreviousPageLink,\n  'NEXT_PAGE_LINK': NextPageLink,\n  'LAST_PAGE_LINK': LastPageLink\n};\n\nconst Paginator = ReactUltimatePagination.createUltimatePagination({\n  itemTypeToComponent: itemTypeToComponent,\n  WrapperComponent: Wrapper,\n});\n\nexport default Paginator;","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Table from \"react-bootstrap/Table\";\nimport Paginator from \"./Paginator.jsx\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst SIZE = 100;\nconst CHARACTERS = [\n  \"2B\",\n  \"Amy\",\n  \"Astaroth\",\n  \"Azwel\",\n  \"Cervantes\",\n  \"Geralt\",\n  \"Groh\",\n  \"Ivy\",\n  \"Kilik\",\n  \"Maxi\",\n  \"Mitsurugi\",\n  \"Nightmare\",\n  \"Raphael\",\n  \"Seung Mi-na\",\n  \"Siegfried\",\n  \"Sophitia\",\n  \"Taki\",\n  \"Talim\",\n  \"Tira\",\n  \"Voldo\",\n  \"Xianghua\",\n  \"Yoshimitsu\",\n  \"Zasalamel\"\n];\n\nclass App extends Component {\n  state = {\n    loading: true,\n    error: null,\n    totalPages: null,\n    currentPage: 1,\n    moves: [],\n    character: \"\",\n    commandFilter: \"\"\n  };\n\n  fetchMoves = (page, character) => {\n    let url = `https://berserkerscience.herokuapp.com/moves/?size=${SIZE}&page=${page}`;\n\n    if (character) {\n      url += `&character=${character}`;\n    }\n\n    fetch(url)\n      .then(response => response.json())\n      .then(\n        results => {\n          this.setState({\n            loading: false,\n            moves: results.moves,\n            totalPages: results.numPages\n          });\n        },\n        error => {\n          this.setState({ loading: false, error });\n        }\n      );\n  };\n\n  componentDidMount = () => {\n    this.fetchMoves(0);\n  };\n\n  onFilterCharacter = e => {\n    const character = e.target.value;\n    this.setState({ character, currentPage: 1 });\n    this.fetchMoves(0, character);\n  };\n\n  onFilterCommand = e => {\n    this.setState({ commandFilter: e.target.value });\n  };\n\n  onPageChange = page => {\n    const { character } = this.state;\n    this.setState({ currentPage: page });\n    this.fetchMoves(page - 1, character);\n  };\n\n  render = () => {\n    const {\n      error,\n      loading,\n      moves,\n      character,\n      commandFilter,\n      currentPage,\n      totalPages\n    } = this.state;\n\n    if (error) {\n      return <div>Error loading: {error.message}</div>;\n    }\n\n    if (loading) {\n      return <div>Loading...</div>;\n    }\n\n    let filtered_moves = moves;\n    if (commandFilter) {\n      filtered_moves = filtered_moves.filter(\n        move => commandFilter === move.command\n      );\n    }\n\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Form.Group>\n              <Form.Label>Filter Character</Form.Label>\n              <Form.Control\n                onChange={this.onFilterCharacter}\n                as=\"select\"\n                value={character}\n              >\n                <option value=\"\">All</option>\n                {CHARACTERS.map(character => (\n                  <option key={character}>{character}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Col>\n          <Col>\n            <Form.Group>\n              <Form.Label>Filter Command</Form.Label>\n              <Form.Control\n                onChange={this.onFilterCommand}\n                type=\"text\"\n                placeholder=\"Example: 5A\"\n                value={commandFilter}\n              />\n            </Form.Group>\n          </Col>\n        </Row>\n\n        <Table striped bordered hover size=\"sm\" responsive>\n          <thead>\n            <tr>\n              <th>Character</th>\n              <th>Command</th>\n              <th>Hits</th>\n              <th>Impact Frames</th>\n              <th>Blocked Frames</th>\n              <th>Hit Frames</th>\n              <th>Counter Hit Frames</th>\n              <th>Damage</th>\n              <th>Gap Frames</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filtered_moves.map(move => (\n              <tr key={move.moveId}>\n                <td>{move.character}</td>\n                <td>{move.command}</td>\n                <td>{move.attackTypes.join(\", \")}</td>\n                <td>{move.impactFrames}</td>\n                <td>{move.blockFrames}</td>\n                <td>{move.hitProperty ? move.hitProperty : move.hitFrames}</td>\n                <td>\n                  {move.counterProperty\n                    ? move.counterProperty\n                    : move.counterFrames}\n                </td>\n                <td>{move.damage.join(\", \")}</td>\n                <td>{move.gapFrames.join(\", \")}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <div className=\"text-xs-center\">\n          <Paginator\n            hidePreviousAndNextPageLinks\n            currentPage={currentPage}\n            totalPages={totalPages}\n            onChange={this.onPageChange}\n          />\n        </div>\n      </Container>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}